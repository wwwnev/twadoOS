* Reading notes for "Operating Systems: From 0 to 1
By Do Hoang Tu
https://github.com/tuhdo/os01/tree/master

* Pre-reading
http://www.allaboutcircuits.com/textbook/, chapter 1 and chapter 2
** DONE (Mostly) Basic concepts elec.: atoms, electrons, protons, neutrons, cur. flow
*** electron 
- smallest known carrier of electric charge. ~1.6 * 10⁻¹⁹ C (coulombs)
- coulomb = unit of electrical charge, force generated between point charges.
*** Electric charge  
(from wiki) physical property of matter that causes it to experience a
force when placed in an electromagnetic field. Electric charge can be positive 
or negative (commonly carried by protons and electrons respectively, by 
convention). Like charges repel each other and unlike charges attract each 
other. An object with no net charge is referred to as electrically neutral.
*** Atom
All objects are composed of atoms, akin to building-blocks.
**** Composition
- Atoms are composed of smaller compoenents known as *particles*:
protons (have positive electrict charge), neutrons and electrons (negative ch.). 
(C-c C-x C-v, to display/hide img)
[[./an_atom.png]]

- Nucleus made of protons and neutrons.
- Amount of protons changes the type of atom, the elemental identity
- Not the case for neutrons, although as hard to add or remove.
- Mass would change slightly and atom may become radioactive for example.
- Electrons have more freedom to move around, can even leave the atom.
- Electrons and protons are attracted to one another over a distance.
- Electrons and protons are repulsed between themselves, except at very short
distances (see strong nuclear force).
- At equal presence in an atom, electrons and protons counteract each other
so that the net charge within the atom is zero 
- Opposed to being charged when nb. of electrons != protons. 
- Neutrons have no charge and are not attracted or repelled by particles.

*** Static Electricity
- It is the result of an imbalance in electrons between objects.
- Static because the displaced electrons tend to remain stationary after being
moved.
- For the most part a nuisance.

*** Conductors, Insulators, and Electron flow
**** Electric conductivity
Property of a material: relative mobility of electrons.
Determined by the types of atoms in a material, and how they are linked together
Free electrons: virt. unbond electrons, free to leave their respective atoms
Conductors: materials with high electron mobility
Insulators: materials with low electron mobility
**** Electron flow / Electric current
While the normal motion of “free” electrons in a conductor is random, with no 
particular direction or speed, electrons can be influenced to move in a 
coordinated fashion through a conductive material. (~dynamic electricity)
When electrons move uniformely through a conductor, they push the ones ahead of
them. If one stops, all of them stops. So if an electron enters one end of a
cable, another has to exit at the other end, pretty much instantaneously.
*** Electric circuits
For continuous charge flow, you need a continuous (looping) path, aka a circuit
*** Voltage and currents
- In the context of electrical power sources, *voltage* is the amount of pot. 
energy available (work to be done) per unit charge, to move charges through a 
conductor. Always referenced between 2 points, since it's potential energy.
- In simpler terms, it's the measure of "push" available to motivate the charge
- Chemical reactions (battery), radiant energy (solar cells), and the influence
of magnetism on conductors (generators) are a few ways to produce voltage.
Battery: (+) tries to push charge carriers (electrons), while (-) tries to
attract charge carriers. (a bit confusing) +/- of battery are polarities at ends
- Electrical current: continuous and uniform flow of charge through a circuit
- Direct current (DC): single direction flow of current
- Alternating current (AC): direction of current switches back and forth
- Voltage drop: kinda like voltage. If you break a circuit, there will be the
full voltage produced by the battery manifested across the break.
- Polarity of voltage drop: (across break ofc) depends on the order...
Between the positive end and the negative end, it is a positive polarity. But
between the negative end and the positive end, it is a negative polarity. So
we just say that the polarity is (+) when connected to the + polarity of the 
battery. It's so easy, it's hard to explain?
- Remember, polarity is *relative between 2 points*
*** Switches and resistances
- Switch open = open circuit = electric charge cant flow continuously
- Conductors have low resistance, insulators have high resistance.
- Resistance = opposing the flow of electric current
- There will be voltage manifested (or “dropped”) between any points in a 
circuit with resistance between them.
- although the amount of current (i.e., the quantity of charge moving past a 
given point every second) is uniform in a simple circuit, the amount of 
voltage (potential energy per unit charge) between different sets of points 
in a single circuit may vary considerably.

*** TODO Semi-conductors, diodes
** DONE Review Ohm's law
- Current : Continuous movement of electric charge through the conductors of a circuit is called a current
- Voltage : Force motivating charge carriers to "flow"/move
| Quantity   | Symbol | Unit of measurement | Unit Abbreviation |
| Current    | I      | Ampere              | A                 |
| Voltage    | E or V | Volt                | V                 |
| Resistance | R      | Ohm                 | Omega             |
*** Ohm's Law Equation
- E = I * R
*** An analogy
- Pressure = Flow rate * resistance
*** Power and work
- Power: measure of how much work can be performed in a given amount of time. 
Work is generally defined in terms of the lifting of a weight against the pull
of gravity. The heavier the weight and/or the higher it is lifted, the more work
has been done. Power is a measure of how rapidly a standard amount of work is 
done.
- Power: 
- P = I * E
- Unit is the watt, "W"
*** Joule's Law Equation
- P = I² * R
*** Resistors
PCB: an assembly made of sandwiched layers of insulating phenolic fiber-board 
and conductive copper strips, into which components may be inserted and secured
by a low-temperature welding process called “soldering.”
- Devices called resistors are built to provide precise amounts of resistance in
electric circuits. Resistors are rated both in terms of their resistance (ohms)
and their ability to dissipate heat energy (watts).
* 1. Domain documents
** 1.2.1 Software requirement document
Software requirement document includes both a list of requirements and
a description of the problem domain.
A good way to test the quality of a require-
ment document is to provide it to a domain expert for proofreading,
to ensure he can understand the material thoroughly.

** 1.2.2 Software Specification document
Software specification document states rules relating desired behavior of
the output devices to all possible behavior of the input devices, as well
as any rules that other parts of the problem domain must obey.
Only concerns interface design.

** 1.3 Documents for writing an x86 OS
- Intel® 64 and IA-32 Architectures Software Developer’s Manual (Volume 1, 2, 3)
- Intel® 3 Series Express Chipset Family Datasheet
- System V Application Binary Interface
Intel documents divide the requirement and specification sections clearly,
but call the sections with different names. The corresponding to the requirement
document is a section called “Functional Description”, which consists mostly of 
domain description; for specification, “Register Description” section describes 
all programming interfaces.

* 2. From hardware to software: Layers of abstraction
- Layers of abstraction are based.
- Metal-Oxide-Semiconductor Field-Effect-Transistor (MOSFET)
- CMOS = Complementary MOSFET, contains NMOS and PMOS which are complementary
- A k-input gate uses k PMOS and k NMOS transistors
- With the help of transistors, (etched on silicon?)
- We can create NAND gates with those transistors. Voltages entering the 2 gates 
  dictate whether the inputs are 1 or 0. Same idea for the output voltage.
- Arrangements of NAND gates give us access to all other gates.
  - NOT : Plug the same input voltage in both inputs of the NAND
    but i dont think this is the way it's done.
  - AND : NAND -> NOT
  - OR :  NOT x NAND NOT y
  - NOR : NOR -> NOT
** 2.3 Beyond logic gates: machine language
- Arrangements of various gates can form various operations, such as addition(?)
- *Machine language* is a collection of unique bit patterns that a device can 
  identify and perform a corresponding action.
- A *machine instruction* is a unique bit pattern that a device can identify. In a
  computer system, a device with its language is called CPU - Central Processing
  Unit, which controls all activities going inside a computer.
  + For example, in the x86 architecture, the pattern 10100000 means telling a CPU
    to add two numbers, or 000000101 to halt a computer. In the early days of 
    computers, people had to write completely in binary.
- For each instruction, there is a small circuit implementing it. The bit pattern
  of an instruction is like a name to call a function.
- Not only CPUs use machine instructions.
- Assembly language is the symbolic representation of binary machine code, by 
  giving bit patterns mnemonic names. 00000101 -> hlt (for the halt instr.)
- I think 00000101 is an opcode or operation code.
- The *decoder* is a device in the CPU that decides which circuit to use to
  process instructions. It decides based on the opcode.
- An *assembler* translates text instructions into binary code.
- Instructions are stored on a *storage device*, saving 0 and 1 states.
- The process implemented by a computer (Von Neumann?)
  1. *Fetch* the instruction from the storage
  2. *Decode* the instruction
  3. *Execute* the instruction
** 2.3.x Programming languages
- Assembly code has a lot of repeating code, patterns of usages.
- A *compiler* is used to translate high level programming language code into
  assembly code.
- The more abstractions a programming language imposes, the more difficult it is
  for writing low-level software, such as hardware drivers or an operating 
  system
- That's why we use C !!!
- Higher-level programming languages help to focus on problem domains that are 
  not related to hardware at all.
- Lower-level programming languages help to focus on the inner-working of a 
  machine, thus are best suited for problem domains that are related to control 
  hardware.
** 2.4 Abstraction
- Abstraction is a technique for hiding complexity that is irrelevant to the
  problem in context.
  - Logic gates abstract away the details of CMOS.
  - Machine language abstracts away the details of logic gates.
  - Assembly language abstracts away the details of machine languages.
  - Programming language abstracts away the details of assembly languages.
  - A lower layer has a recurring pattern. Then, this recurring pattern is taken
    out and built a language on top of it.
  - A higher layer strips away layer-specific (non-recurring) details to focus 
    on the recurring details.
  - The recurring details are given a new and simpler language than the 
    languages of the lower layers.
- C is general-purpose, as opposed to domain-specific languages (dsl)
- Linux full of DSL, are placed in /etc directory, such as a web server.

* 3. Computer Architecture
- at least a CPU
- Single-purpose computer = built at the hardware level for specific tasks
- General-purpose computer = can be progrmmed to emulate features of single-
  purpose computers.
- Embedded computer = single-board or single-chip computer with limited 
  resources
- Microcontroller = embedded computer designed for controlling other HW devices
  general-purpose computers
- System-on-chip = full computer on a single chip.
** Field Gate Programmable Array (FPGA)
- Hardware array of reconfigurable gates.
** Application-Specific Integrated Circuit (ASIC)
- Chip desgned for a particular purpose. Optimized for that.
** 3.2 Computer Architecture
- Comp. arch. = ISA + Computer Organization + Hardware
                high level -----------------> low level
- ISA = basic set of commands and instructions that a micropocessor understands
  and can carry out.
- Includes all the instructions, registers, interrupts, memory models, 
  addressing modes, I/O, etc. of a CPU.
- Computer organization = functional view of the design of a computer.
  - For example : Von Neumann architecture.
  - Can have the same ISA but different computer organization.

  - CPU: fetches instructions continuously from main memory and executes
  - Memory: stores program code and data
  - Bus: electrical wires for sending raw bits between the above components
  - I/O Devices: give input to a computer (i.e. KB) and take output from
    computer (i.e. monitor).
  - The Von-Neumann computer operates by storing its instructions in main
    memory, and CPU repeatedly fetches those instructions into its internal
    storage for executing, one after another. Data are transferred through
    a data bus between CPU, memory and I/O devices, and where to store
    in the devices is transferred through the address bus by the CPU. This
    architecture completely implements the *fetch – decode – execute cycle*.
  - Today, computer has more buses that are specialized.
  - To use these devices, a programmer needs to controls the CPU to use
    the programming interfaces of other devices. CPU is the only way, as
    CPU is the only direct device a programmer can use and the only de-
    vice that understand code written by a programmer.
  - In a CPU, many OS concepts are already implemented directly in hard-
    ware, e.g. task switching, paging. A kernel programmer needs to know
    how to use the hardware features, to avoid duplicating such concept
    in software, thus wasting computer resources.
  - Assembly language is one of the interfaces that are provided for software
    engineers to control a CPU
  - Registers = HW components for high-speed data access and communication w/
    other devices.
    - In a CPU, most registers are used as high-speed storage for temporary
      data. 
    - Other devices that a CPU can communicate always have a set of registers
      for interfacing with the CPU.
  - Port = specialized register in a HW device used for communication with other
    devices. It doesnt store data, but rather delegate data to some other circt.
  - These 2 interfaces = only interfaces for controlling HW with SW. Device 
    drivers = learn the functionality of each register.
  - Memory = storage of information. Many cells, one byte each w/ an address nb.
    - Where SW instructions is stored and retrieved by CPU.
  - RAM : controlled by a device called a memory controller. Most modern
    processors have the memory controller embedded, so the CPU has a dedicated
    memory bus connecting the processor to the RAM.
    - On older CPU, need a MCH as an intermediary.
